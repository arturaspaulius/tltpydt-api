{
  "name": "serverless-api",
  "version": "1.0.0",
  "engines": {
    "node": ">=18.0.0"
  },
  "description": "",
  "dependencies": {
    "@aws-sdk/client-iot-data-plane": "^3.454.0",
    "@aws-sdk/client-s3": "^3.454.0",
    "@aws-sdk/client-ses": "^3.454.0",
    "@aws-sdk/client-sns": "^3.454.0",
    "@aws-sdk/client-sqs": "^3.454.0",
    "@aws-sdk/client-sts": "^3.454.0",
    "@aws-sdk/s3-request-presigner": "^3.454.0",
    "adm-zip": "^0.5.10",
    "aws-xray-sdk": "^3.5.3",
    "bcryptjs": "2.4.3",
    "civ6-save-parser": "^1.2.3",
    "dynamoose": "^3.2.1",
    "express": "^4.18.2",
    "express-async-errors": "^3.1.1",
    "generate-password": "1.7.1",
    "inversify": "6.0.2",
    "inversify-binding-decorators": "4.0.0",
    "is-url": "1.2.4",
    "jsonwebtoken": "^9.0.2",
    "lodash": "4.17.21",
    "moment": "^2.29.4",
    "node-fetch": "^2.7.0",
    "passport": "^0.6.0",
    "passport-steam": "1.0.18",
    "pydt-civ5-save-parser": "1.0.9",
    "pydt-shared-models": "^1.8.3",
    "reflect-metadata": "0.1.13",
    "rollbar": "^2.26.2",
    "source-map-support": "0.5.21",
    "tsoa": "^5.1.1",
    "uuid": "^9.0.1",
    "web-push": "^3.6.6",
    "xml-js": "1.6.11"
  },
  "devDependencies": {
    "@types/adm-zip": "^0.5.5",
    "@types/chai": "^4.3.11",
    "@types/express": "^4.17.21",
    "@types/hapi": "^18.0.14",
    "@types/lodash": "^4.14.202",
    "@types/node": "^20.9.3",
    "@types/node-fetch": "^2.6.9",
    "@types/passport": "^1.0.16",
    "@types/web-push": "^3.6.3",
    "@types/webpack-env": "^1.18.4",
    "@typescript-eslint/eslint-plugin": "^6.12.0",
    "@typescript-eslint/parser": "^6.12.0",
    "chai": "^4.3.10",
    "co": "^4.6.0",
    "eslint": "^8.54.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "export-api-url": "file:local_modules/export-api-url",
    "git-revision-webpack-plugin": "^5.0.0",
    "mocha": "^10.2.0",
    "prettier": "^3.1.0",
    "rimraf": "^5.0.5",
    "serverless": "^3.37.0",
    "serverless-domain-manager": "^7.1.2",
    "serverless-offline": "^13.3.0",
    "serverless-prune-plugin": "^2.0.2",
    "serverless-webpack": "^5.13.0",
    "ts-loader": "^9.5.1",
    "ts-node": "^10.9.1",
    "typemoq": "^2.1.0",
    "typescript": "^5.3.2",
    "webpack": "^5.89.0",
    "webpack-node-externals": "^3.0.0"
  },
  "scripts": {
    "test": "mocha -r ts-node/register {api,functions,lib}/**/*.spec.ts",
    "start-dynamo-docker": "docker-compose -f testdata/docker-compose.yml up -d",
    "integration-test": "bash -c \"IS_OFFLINE=true RESOURCE_PREFIX=civx-integration- mocha -r ts-node/register {api,functions,lib}/**/*.int-spec.ts --timeout 20000\"",
    "clean": "rimraf api/_gen .webpack",
    "swagger-gen": "tsoa spec",
    "routes-gen": "bash -c 'mkdir -p api/_gen/routes' && tsoa routes",
    "lint": "eslint {api,functions,lib}/**/*.ts",
    "lint-fix": "eslint {api,functions,lib}/**/*.ts --fix",
    "build": "npm run clean && npm run routes-gen && npm run lint && npm run swagger-gen",
    "start": "npm run build && bash -c \"npx serverless offline --host 0.0.0.0\"",
    "start-prod": "npm run build && bash -c \"npx serverless offline --stage prod --host 0.0.0.0\"",
    "debug": "npm run build && bash -c \"./debug-sls.sh offline --host 0.0.0.0\"",
    "debug-prod": "npm run build && bash -c \"./debug-sls.sh offline --stage prod --host 0.0.0.0\"",
    "clean-lambda": "bash -c \"AWS_REGION=us-east-1 node -e \\\"require('./_scripts/cleanLambda').clean();\\\"",
    "deploy-develop": "npm run build && tsoa spec --host api-dev.playyourdamnturn.com && bash -c \"npx serverless deploy\"",
    "deploy-master": "npm run build && tsoa spec --host api.playyourdamnturn.com && bash -c \"WEB_URL=https://www.playyourdamnturn.com npx serverless deploy --stage prod\"",
    "backup-prod": "python _scripts/dynamodump/dynamodump.py -m backup -s prod* -r us-east-1",
    "copy-backup-to-dev": "python _scripts/dynamodump/dynamodump.py -m restore -s prod* -d dev* -r us-east-1 --dataOnly && bash _scripts/reset-dev-emails.sh",
    "copy-prod-to-dev": "npm run backup-prod && npm run copy-backup-to-dev",
    "encrypt-config": "openssl des3 -pbkdf2 -salt -in config.yml -out config.yml.encrypted",
    "decrypt-config": "openssl des3 -d -pbkdf2 -salt -in config.yml.encrypted -out config.yml"
  }
}
